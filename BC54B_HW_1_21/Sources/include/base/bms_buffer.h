/**
*
* Copyright (c) 2012 Ligoo Inc.
*
* @file bms_buffer.h
* @brief
* @note
* @author
* @date 2012-4-26
*
*/

#ifndef BMS_BUFFER_H_
#define BMS_BUFFER_H_
#include "bms_defs.h"

typedef struct
{
    PPINT8U buffers;
    INT16U  buffer_size;
    INT16U  buffer_count;
}Buffers, *buffers_t;


#define ALLOCAL_STATIC_BUFFERS(BUFFERS, COUNT, SIZE)    \
do{\
    int index;\
    static INT8U __raw_buffers[COUNT][SIZE];\
    static PINT8U __buffers[COUNT];\
    for (index = 0; index < COUNT; ++index)\
        __buffers[index] = __raw_buffers[index];\
    BUFFERS.buffer_count = COUNT;\
    BUFFERS.buffers = __buffers;\
    BUFFERS.buffer_size = SIZE;\
}while(0)


/**********************************************
 *
 * set or get data
 *
 ***********************************************/
#define GET_INT24U GET_BT_INT24U
#define GET_INT16U GET_BT_INT16U
#define GET_INT8U GET_BT_INT8U
#define SET_INT24U SET_BT_INT24U
#define SET_INT16U SET_BT_INT16U
#define SET_INT8U SET_BT_INT8U

#define GET_BT_INT24U(ADDRESS, POS) ((INT32U)ADDRESS[POS] << 16) + ((INT32U)ADDRESS[POS + 1] << 8) + (ADDRESS[POS + 2])
#define GET_BT_INT16U(ADDRESS, POS) ((INT16U)ADDRESS[POS] << 8) + (ADDRESS[POS + 1])
#define GET_BT_INT8U(ADDRESS, POS)  (ADDRESS[POS])
#define GET_LT_INT24U(ADDRESS, POS) (ADDRESS[POS]) + ((INT16U)ADDRESS[POS + 1]  << 8) + ((INT32U)ADDRESS[POS + 2]  << 16)
#define GET_LT_INT16U(ADDRESS, POS) (ADDRESS[POS]) + ((INT16U)ADDRESS[POS + 1]  << 8)
#define GET_LT_INT8U(ADDRESS, POS)  (ADDRESS[POS])

#define SET_BT_INT24U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)((VALUE) >> 16); ADDRESS[POS + 1] = (INT8U)((VALUE) > 8); ADDRESS[POS + 2] = (INT8U)((VALUE) & 0xFF);}
#define SET_BT_INT16U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)((VALUE) >> 8); ADDRESS[POS + 1] = (INT8U)((VALUE) & 0xFF);}
#define SET_BT_INT8U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)(VALUE);}
#define SET_LT_INT24U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)((VALUE) & 0xFF); ADDRESS[POS + 1] = (INT8U)((VALUE) >> 8); ADDRESS[POS + 2] = (INT8U)((VALUE) >> 16);}
#define SET_LT_INT16U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)((VALUE) & 0xFF); ADDRESS[POS + 1] = (INT8U)((VALUE) >> 8);}
#define SET_LT_INT8U(ADDRESS, POS, VALUE) {ADDRESS[POS] = (INT8U)(VALUE);}

#define SET_BT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (FUNC); SET_BT_INT24U(ADDRESS, POS, macro_temp);}
#define SET_BT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (FUNC); SET_BT_INT16U(ADDRESS, POS, macro_temp);}
#define SET_LT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (FUNC); SET_LT_INT24U(ADDRESS, POS, macro_temp);}
#define SET_LT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (FUNC); SET_LT_INT16U(ADDRESS, POS, macro_temp);}

/**********************************************
 *
 * read or write data and the position is moved
 *
 ***********************************************/
#define INIT_WRITE_BUFFFER() INT16U macro_temp;

#define READ_INT8U  READ_BT_INT8U
#define READ_INT16U READ_BT_INT16U
#define READ_INT24U READ_BT_INT24U
#define READ_INT32U READ_BT_INT32U

#define READ_BT_INT8U(ADDRESS, POS)  (POS++, ADDRESS[POS - 1])
#define READ_BT_INT16U(ADDRESS, POS) (POS += 2, (ADDRESS[POS - 1]) + ((INT16U)(ADDRESS[POS - 2]) << 8))
#define READ_BT_INT24U(ADDRESS, POS) (POS += 3, (ADDRESS[POS - 1]) + ((INT32U)(ADDRESS[POS - 2]) << 8) + ((INT32U)(ADDRESS[POS - 3]) << 16))
#define READ_BT_INT32U(ADDRESS, POS) (POS += 4, (ADDRESS[POS - 1]) + ((INT32U)(ADDRESS[POS - 2]) << 8) + ((INT32U)(ADDRESS[POS - 3]) << 16) + ((INT32U)(ADDRESS[POS - 4]) << 24))

#define READ_BT_INT32U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+3 < SIZE)READ_BT_INT32U(ADDRESS, POS);}
#define READ_BT_INT24U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+2 < SIZE)READ_BT_INT24U(ADDRESS, POS);}
#define READ_BT_INT16U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+1 < SIZE)READ_BT_INT16U(ADDRESS, POS);}
#define READ_BT_INT8U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS < SIZE)READ_BT_INT8U(ADDRESS, POS);}

#define READ_LT_INT8U(ADDRESS, POS) (POS++, ADDRESS[POS - 1])
#define READ_LT_INT16U(ADDRESS, POS) (POS += 2, (ADDRESS[POS - 2]) + ((INT16U)(ADDRESS[POS - 1]) << 8))
#define READ_LT_INT24U(ADDRESS, POS) (POS += 3, (ADDRESS[POS - 3]) + ((INT32U)(ADDRESS[POS - 2]) << 8) + ((INT32U)(ADDRESS[POS - 1]) << 16))
#define READ_LT_INT32U(ADDRESS, POS) (POS += 4, (ADDRESS[POS - 4]) + ((INT32U)(ADDRESS[POS - 3]) << 8) + ((INT32U)(ADDRESS[POS - 2]) << 16) + ((INT32U)(ADDRESS[POS - 1]) << 24))

#define READ_LT_INT32U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+3 < SIZE)READ_LT_INT32U(ADDRESS, POS);}
#define READ_LT_INT24U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+2 < SIZE)READ_LT_INT24U(ADDRESS, POS);}
#define READ_LT_INT16U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS+1 < SIZE)READ_LT_INT16U(ADDRESS, POS);}
#define READ_LT_INT8U_WITH_DATA_SIZE(ADDRESS, POS, SIZE) {if(POS < SIZE)READ_LT_INT8U(ADDRESS, POS);}

#define WRITE_INT16U WRITE_BT_INT16U
#define WRITE_INT8U  WRITE_BT_INT8U
#define WRITE_BUFFER(ADDRESS, POS, SOURCE_ADDRESS, SOURCE_SIZE) {safe_memcpy(ADDRESS + POS, SOURCE_ADDRESS, SOURCE_SIZE); POS += SOURCE_SIZE;}

#define WRITE_BT_INT32U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)((VALUE) >> 24); ADDRESS[POS++] = (INT8U)((VALUE) >> 16); ADDRESS[POS++] = (INT8U)((VALUE) >> 8); ADDRESS[POS++] = (INT8U)(VALUE & 0xFF);}
#define WRITE_BT_INT24U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)((VALUE) >> 16); ADDRESS[POS++] = (INT8U)((VALUE) >> 8); ADDRESS[POS++] = (INT8U)(VALUE & 0xFF);}
#define WRITE_BT_INT16U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)((VALUE) >> 8); ADDRESS[POS++] = (INT8U)(VALUE & 0xFF);}
#define WRITE_BT_INT8U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)(VALUE);}

#define WRITE_LT_INT32U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)(VALUE & 0xFF); ADDRESS[POS++] = (INT8U)((VALUE) >> 8); ADDRESS[POS++] = (INT8U)((VALUE) >> 16); ADDRESS[POS++] = (INT8U)((VALUE) >> 24);}
#define WRITE_LT_INT24U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)(VALUE); ADDRESS[POS++] = (INT8U)((VALUE) >> 8); ADDRESS[POS++] = (INT8U)((VALUE) >> 16);}
#define WRITE_LT_INT16U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)(VALUE & 0xFF); ADDRESS[POS++] = (INT8U)((VALUE) >> 8);}
#define WRITE_LT_INT8U(ADDRESS, POS, VALUE) {ADDRESS[POS++] = (INT8U)(VALUE);}

#define WRITE_BT_INT32U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+3 < SIZE)WRITE_BT_INT32U(ADDRESS, POS, VALUE);}
#define WRITE_BT_INT24U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+2 < SIZE)WRITE_BT_INT24U(ADDRESS, POS, VALUE);}
#define WRITE_BT_INT16U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+1 < SIZE)WRITE_BT_INT16U(ADDRESS, POS, VALUE);}
#define WRITE_BT_INT8U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)    {if(POS < SIZE)WRITE_BT_INT8U(ADDRESS, POS, VALUE);}

#define WRITE_LT_INT32U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+3 < SIZE)WRITE_LT_INT32U(ADDRESS, POS, VALUE);}
#define WRITE_LT_INT24U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+2 < SIZE)WRITE_LT_INT24U(ADDRESS, POS, VALUE);}
#define WRITE_LT_INT16U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)   {if(POS+1 < SIZE)WRITE_LT_INT16U(ADDRESS, POS, VALUE);}
#define WRITE_LT_INT8U_WITH_BUFF_SIZE(ADDRESS, POS, VALUE, SIZE)    {if(POS < SIZE)WRITE_LT_INT8U(ADDRESS, POS, VALUE);}

#define WRITE_BT_INT32U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT32U)(FUNC); WRITE_BT_INT32U(ADDRESS, POS, macro_temp);}
#define WRITE_BT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT32U)(FUNC); WRITE_BT_INT24U(ADDRESS, POS, macro_temp);}
#define WRITE_BT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT16U)(FUNC); WRITE_BT_INT16U(ADDRESS, POS, macro_temp);}

#define WRITE_BT_INT32U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+3 < SIZE)WRITE_BT_INT32U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}
#define WRITE_BT_INT24U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+2 < SIZE)WRITE_BT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}
#define WRITE_BT_INT16U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+1 < SIZE)WRITE_BT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}

#define WRITE_LT_INT32U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT32U)(FUNC); WRITE_LT_INT32U(ADDRESS, POS, macro_temp);}
#define WRITE_LT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT32U)(FUNC); WRITE_LT_INT24U(ADDRESS, POS, macro_temp);}
#define WRITE_LT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC) {macro_temp = (INT16U)(FUNC); WRITE_LT_INT16U(ADDRESS, POS, macro_temp);}

#define WRITE_LT_INT32U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+3 < SIZE)WRITE_LT_INT32U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}
#define WRITE_LT_INT24U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+2 < SIZE)WRITE_LT_INT24U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}
#define WRITE_LT_INT16U_WITH_FUNC_DATA_AND_BUFF_SIZE(ADDRESS, POS, FUNC, SIZE) {if(POS+1 < SIZE)WRITE_LT_INT16U_WITH_FUNC_DATA(ADDRESS, POS, FUNC);}

#endif /* BMS_BUFFER_H_ */
